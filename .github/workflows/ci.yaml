name: CI

on: 
    push:
        branches: [main,test/ci]
    pull_request:
        branches: [test/ci]

jobs:
    test:
        runs-on: ubuntu-latest
        services:
            testdb:
                image: postgres:15
                env:
                    POSTGRES_USER: ${{secrets.TEST_DB_USER}}
                    POSTGRES_PASSWORD: ${{secrets.TEST_DB_PASSWORD}}
                    POSTGRES_DB: ${{secrets.TEST_DB_NAME}}
                    POSTGRES_PORT: ${{secrets.TEST_DB_PORT}}
                ports: 
                    - 5432:5432
                options: >-
                    --health-cmd "pg_isready -U root -d lawyer_management"
                    --health-interval 5s
                    --health-timeout 5s
                    --health-retries 5
        
        
        env:
            #jwt crypt key
            JWT_SECRET: ${{secrets.JWT_SECRET}}



            # for test postgressdbk
            TEST_DB_HOST: ${{secrets.TEST_DB_HOST}}
            TEST_DB_PORT: ${{secrets.TEST_DB_PORT}}
            TEST_DB_USER: ${{secrets.TEST_DB_USER}}
            TEST_DB_NAME: ${{secrets.TEST_DB_NAME}}
            TEST_DB_PASSWORD: ${{secrets.TEST_DB_PASSWORD}}

            # for n8n automations:
            WEBHOOK_URL: ${{secrets.WEBHOOK_URL}}
            WEBHOOK_SECRET: ${{secrets.WEBHOOK_SECRET}}

        steps: 
            - name: repository checkout
              uses: actions/checkout@v4
            
            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                go-version: 1.25.1
                cache-dependency-path: backend/go.sum

            - name: Wait for Postgres to be ready
              run: |
                timeout=60
                count=0
                # Access the service via localhost:5432 from the runner host
                until pg_isready -h 127.0.0.1 -p 5432; do
                sleep 2
                count=$((count+2))
                if [ $count -ge $timeout ]; then
                    echo "Postgres did not start in time"
                    exit 1
                fi
                done

                
            - name: download depends
              working-directory: backend 
              run: go mod download
              
            - name: run tests
              working-directory: backend 
              run: go test -v ./internal/tests/...
            


